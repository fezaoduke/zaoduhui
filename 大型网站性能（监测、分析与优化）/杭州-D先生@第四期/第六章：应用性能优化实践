    性能优化的副作用：解决一个性能瓶颈，往往又会出现另外的瓶颈或其他问题，所以性能优化更加切实的目标是做到在一定范围内使应用的各项性能趋向合理和保持一定的平衡。所以在性能优化的一开始就要考虑到各种产生副作用的可能性，一开始就需要规避。
    一些验证过的经验：
        最少请求数：
            TAB页异步加载或延迟加载；
            合并JS/CSS文件；
            Sprites CSS图像地图，统一共用JS/CSS文件；
            合并ajax请求；
            避免重定向；
            减少iframe请求；
            头像、图片滚屏延迟加载；
            不重要的页面模块异步加载；
            多级Cache
        最快请求速度：
            设置长时间缓存；
            尽量使请求可缓存；
            Cookie隔离；
            动、静态应用分离；
            按类型选择合适的WEB服务器；
            适当使用多域名增加并行下载；
            设置GZIP压缩；
            多IDC部署、动态内部代理；
            使用CDN网络；
            IP库定位能力提高；
            图片质量压缩，使用png8
            图片预加载；
            JS/CSS混淆；
            页面代码压缩；
            统一公共JS库代码和应用代码；
            减少cookie的大小；
            逻辑层协议合并、并行处理；
            数据、索引内存、SSD并行写；
        最快可见可用：
            首屏优化原则；
            减少元素数量、size；
            HTML,CSS,JS代码减肥；
            JS性能优化；DIV+CSS布局；
            优化，避免CSS表达式；
            Sprites分屏合并CSS/JS；
            位于页面底部JS并行下载；
            避免复杂JS循环和计算；
            统计JS放到页面最尾处；
            按需加载、异步加载、延迟加载、预加载；
            后台尽快输出html代码；
    防止过早和过度优化
    网络优化：
        IDC优化、ISP优化、CDN优化、BGP优化、TDO优化、DNS优化、GSLB优化；
    系统优化：
        压缩优化、缓存优化、分离优化、内核优化、传输优化、并发优化、隔离优化、网卡优化、硬件优化；
    前端优化：
        首屏优化、内容优化、请求优化、CSS优化、JS优化、图片优化； 
    后端优化：
        架构优化、并行优化、异步优化、基础优化、算法优化、程序优化、缓存优化；
    移动优化：
        网络优化、DNS优化、接入优化、协议优化、请求优化、缓存优化、策略优化、启动优化、交互优化、内存优化；
    其他优化：
        SPDY、HTTP/2、ESI、SDCH、BigPipe、DNS Prefresh、HHVM
